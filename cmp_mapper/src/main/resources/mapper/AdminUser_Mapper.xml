<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hfxt.cmp.mapper.IAdminUserDao">
<!-- 新增的方法写在这里 -->


<!-- 保存非空列,返回受影响的行数 -->
	<insert id="saveSelective" useGeneratedKeys="true" keyProperty="Vo.id">
		Insert Into tb_admin_user 
		<trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="Vo.loginName != null">login_name,</if>
            <if test="Vo.loginPass != null">login_pass,</if>
            <if test="Vo.loginSalt != null">login_salt,</if>
            <if test="Vo.updaterId != null">updater_id,</if>
            <if test="Vo.updateTime != null">update_time,</if>
           
		</trim>
		<trim prefix="Values (" suffix=")" suffixOverrides=",">
            <if test="Vo.loginName != null">#{Vo.loginName},</if>
            <if test="Vo.loginPass != null">#{Vo.loginPass},</if>
            <if test="Vo.loginSalt != null">#{Vo.loginSalt},</if>
            <if test="Vo.updaterId != null">#{Vo.updaterId},</if>
            <if test="Vo.updateTime != null">#{Vo.updateTime},</if>
            
		</trim>
	</insert>
    
    <!-- 根据主键删除-->
	<delete id="delete">
		Delete From tb_admin_user
		Where id = #{id}
	</delete>
    
    <!-- 删除所有记录,返回受影响的行数 -->
	<delete id="deleteAll">
		Delete From tb_admin_user
	</delete>
    
    <!-- 更新非空列,返回受影响的行数 -->
	<update id="updateSelective">
		Update tb_admin_user
		<trim prefix="Set" suffixOverrides=",">
            <if test="Vo.loginName != null">login_name = #{Vo.loginName},</if>
            <if test="Vo.loginPass != null">login_pass = #{Vo.loginPass},</if>
            <if test="Vo.loginSalt != null">login_salt = #{Vo.loginSalt},</if>
            <if test="Vo.updaterId != null">updater_id = #{Vo.updaterId},</if>
            <if test="Vo.updateTime != null">update_time = #{Vo.updateTime},</if>
		</trim>
		Where tb_admin_user.id = #{Vo.id}
	</update>
    
    <resultMap type="AdminUserVo" id="RM_Default">
        <id column="AdminUser_id" property="id"/>
        <result column="AdminUser_loginName" property="loginName"/>
        <result column="AdminUser_loginPass" property="loginPass"/>
        <result column="AdminUser_loginSalt" property="loginSalt"/>
        <result column="AdminUser_updaterId" property="updaterId"/>
        <result column="AdminUser_updateTime" property="updateTime"/>
	</resultMap>
    
     <!-- ResultMap -->
	<resultMap type="AdminUserVo" id="RM_getVo_Auto">
		<discriminator javaType="int" column="_chooseRM">
			<case value="0" resultMap="RM_Default" /><!-- Auto -->
		</discriminator>
	</resultMap>
    
    <!-- 根据主键查询一条记录,通过'__chooseRM'控制返回的列 -->
	<select id="getVo_Auto" resultMap="RM_getVo_Auto">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	tb_admin_user	As	tb_admin_user
		Where
		tb_admin_user.id = #{id}
	</select>
    
    <!-- 传入id,判断是否存在该记录 -->
	<select id="isExist_Auto" resultType="boolean">
		Select Count(id) > 0
		From	tb_admin_user	As	tb_admin_user
		Where
		tb_admin_user.id = #{id}
	</select>
    
    <!-- 查询记录数量 -->
	<select id="queryCount_Auto" resultType="Long">
		Select Count(tb_admin_user.id)
		From	tb_admin_user	As	tb_admin_user
        <trim prefix="Where" prefixOverrides="And | Or">
			<include refid="Sql_Where"/>
		</trim>
	</select>
    
    <resultMap type="AdminUserVo" id="RM_queryVos_Auto">
        <discriminator javaType="int" column="_chooseRM">
			<case value="0" resultMap="RM_Default" /><!-- Auto -->
		</discriminator>
	</resultMap>
    
    <!-- 查询记录集合,通过'__chooseRM'控制返回的列 -->
	<select id="queryVos_Auto" resultMap="RM_queryVos_Auto">
		Select
		<include refid="Sql_SelectColumns"/>
		#{AdminUserSearch.chooseRM} As _chooseRM
		From	tb_admin_user	As	tb_admin_user
        <trim prefix="Where" prefixOverrides="And | Or">
			<include refid="Sql_Where"/>
		</trim>
		<include refid="Sql_Order"/>
		Limit #{AdminUserSearch.offset},#{AdminUserSearch.limit}
	</select>
    

    <resultMap type="AdminUserVo" id="RM_getVo_AdminView">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="AdminUser_id" property="id"/>
        <result column="AdminUser_loginName" property="loginName"/>
        <result column="AdminUser_loginPass" property="loginPass"/>
        <result column="AdminUser_loginSalt" property="loginSalt"/>
        <result column="AdminUser_updaterId" property="updaterId"/>
        <result column="AdminUser_updateTime" property="updateTime"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <!-- 根据主键查询一条记录,专供AdminView调用 -->
	<select id="getVo_AdminView" resultMap="RM_getVo_AdminView">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	tb_admin_user	As	tb_admin_user
		Where
		tb_admin_user.id = #{id}
	</select>
    
    <resultMap type="AdminUserVo" id="RM_getVo_preAdminEdit">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="AdminUser_id" property="id"/>
        <result column="AdminUser_loginName" property="loginName"/>
        <result column="AdminUser_loginPass" property="loginPass"/>
        <result column="AdminUser_loginSalt" property="loginSalt"/>
        <result column="AdminUser_updaterId" property="updaterId"/>
        <result column="AdminUser_updateTime" property="updateTime"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <!-- 根据主键查询一条记录,专供preAdminEdit调用 -->
	<select id="getVo_preAdminEdit" resultMap="RM_getVo_preAdminEdit">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	tb_admin_user	As	tb_admin_user
		Where
		tb_admin_user.id = #{id}
	</select>
    
    <resultMap type="AdminUserVo" id="RM_getVo_AdminEdit">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="AdminUser_id" property="id"/>
        <result column="AdminUser_loginName" property="loginName"/>
        <result column="AdminUser_loginPass" property="loginPass"/>
        <result column="AdminUser_loginSalt" property="loginSalt"/>
        <result column="AdminUser_updaterId" property="updaterId"/>
        <result column="AdminUser_updateTime" property="updateTime"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <!-- 根据主键查询一条记录,专供AdminEdit调用 -->
	<select id="getVo_AdminEdit" resultMap="RM_getVo_AdminEdit">
		Select
		<include refid="Sql_SelectColumns" />
		#{chooseRM} As _chooseRM
		From	tb_admin_user	As	tb_admin_user
		Where
		tb_admin_user.id = #{id}
	</select>
    
    <resultMap type="AdminUserVo" id="RM_queryVos_AdminList">
		<!-- <discriminator javaType="int" column="_chooseRM"> -->
        <id column="AdminUser_id" property="id"/>
        <result column="AdminUser_loginName" property="loginName"/>
        <result column="AdminUser_loginPass" property="loginPass"/>
        <result column="AdminUser_loginSalt" property="loginSalt"/>
        <result column="AdminUser_updaterId" property="updaterId"/>
        <result column="AdminUser_updateTime" property="updateTime"/>
		<!-- </discriminator> -->
	</resultMap>
    
    <sql id="Sql_SelectColumns">
        tb_admin_user.id As AdminUser_id,
        tb_admin_user.login_name As AdminUser_loginName,
        tb_admin_user.login_pass As AdminUser_loginPass,
        tb_admin_user.login_salt As AdminUser_loginSalt,
        tb_admin_user.updater_id As AdminUser_updaterId,
        tb_admin_user.update_time As AdminUser_updateTime,
	</sql>
    
    <sql id="Sql_Order">
		<trim prefix="Order By ">
    		<choose>
                <when test="AdminUserSearch.sort != null">
                    AdminUser_${AdminUserSearch.sort} 
                    <if test="AdminUserSearch.order != null">
                        ${AdminUserSearch.order}
                    </if>
                </when>
                <otherwise>
                    AdminUser_id Desc
                </otherwise>
            </choose>
		</trim>
	</sql>
    
    <sql id="Sql_Where">
        <if test="AdminUserSearch.eqId != null">
			<![CDATA[ And tb_admin_user.id = #{AdminUserSearch.eqId} ]]>
		</if>
		<if test="AdminUserSearch.neId != null">
			<![CDATA[ And tb_admin_user.id != #{AdminUserSearch.neId} ]]>
		</if>
        <if test="AdminUserSearch.eqLoginName != null">
			<![CDATA[ And tb_admin_user.login_name = #{AdminUserSearch.eqLoginName} ]]>
		</if>
		<if test="AdminUserSearch.lkLoginName != null">
			<![CDATA[ And tb_admin_user.login_name Like '%${AdminUserSearch.lkLoginName}%' ]]>
		</if>
        <if test="AdminUserSearch.eqLoginPass != null">
			<![CDATA[ And tb_admin_user.login_pass = #{AdminUserSearch.eqLoginPass} ]]>
		</if>
		<if test="AdminUserSearch.lkLoginPass != null">
			<![CDATA[ And tb_admin_user.login_pass Like '%${AdminUserSearch.lkLoginPass}%' ]]>
		</if>
        <if test="AdminUserSearch.eqLoginSalt != null">
			<![CDATA[ And tb_admin_user.login_salt = #{AdminUserSearch.eqLoginSalt} ]]>
		</if>
		<if test="AdminUserSearch.lkLoginSalt != null">
			<![CDATA[ And tb_admin_user.login_salt Like '%${AdminUserSearch.lkLoginSalt}%' ]]>
		</if>
        <if test="AdminUserSearch.eqUpdaterId != null">
			<![CDATA[ And tb_admin_user.updater_id = #{AdminUserSearch.eqUpdaterId} ]]>
		</if>
		<if test="AdminUserSearch.neUpdaterId != null">
			<![CDATA[ And tb_admin_user.updater_id != #{AdminUserSearch.neUpdaterId} ]]>
		</if>
        <if test="AdminUserSearch.eqUpdateTime != null">
			<![CDATA[ And date_format(tb_admin_user.update_time,'%Y-%m-%d') = date_format(#{AdminUserSearch.eqUpdateTime},'%Y-%m-%d') ]]>
		</if>
		<if test="AdminUserSearch.geUpdateTime != null">
			<![CDATA[ And tb_admin_user.update_time >= #{AdminUserSearch.geUpdateTime} ]]>
		</if>
		<if test="AdminUserSearch.ltUpdateTime != null">
			<![CDATA[ And tb_admin_user.update_time < #{AdminUserSearch.ltUpdateTime} ]]>
		</if>
        
    </sql>
</mapper>


